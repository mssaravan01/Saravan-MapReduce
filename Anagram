2. Find anagrams in a huge text. An anagram is basically a different arrangement of letters in a word. Anagram does not need to be meaningful.
Input:
“the cat act in tic tac toe.”
Output: 
cat, tac, act

Mapper
-------
package anag;

import java.io.IOException;
import java.util.Arrays;

import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;

public class StubMapper extends Mapper<Object, Text, Text, Text> {

  @Override
  public void map(Object key, Text value, Context context)
      throws IOException, InterruptedException {
    /*
     * TODO implement
     */
	  String[] words = value.toString().split("[ \t]+");
	  String revWord;
	  for(String word:words)
	  {
		  //word=word.toLowerCase();
		  char[] cs=word.toCharArray();
		  Arrays.sort(cs);
		  revWord=new String (cs);
		  context.write(new Text(revWord), new Text(word));
	  }
  }
}

Reducer
--------
package anag;

import java.io.IOException;

import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.mapreduce.Reducer;

public class StubReducer extends Reducer<Text, Text, NullWritable, Text> {

  @Override
  public void reduce(Text key, Iterable<Text> values, Context context)
      throws IOException, InterruptedException {
	  
	  String val2 = "";
	  for(Text val:values){
	  val2 += val.toString() + ",";
	  }

	  val2 = val2.substring(0, val2.length() - 1);
	  context.write(NullWritable.get(),new Text(val2));
  }
}

Driver
-------
package anag;

import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.JobConf;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class StubDriver {

	public static void main(String[] args) throws Exception {
		if (args.length != 2) {
			System.out.printf("Usage: StubDriver <input dir> <output dir>\n");
			System.exit(-1);
		}
		JobConf conf = new JobConf();
		Job job = new Job(conf, "anagram");
		job.setJarByClass(StubDriver.class);
		
		job.setMapperClass(StubMapper.class);
		job.setReducerClass(StubReducer.class);
		
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(Text.class);
		job.setMapOutputKeyClass(Text.class);
		job.setMapOutputValueClass(Text.class);
		
		FileInputFormat.addInputPath(job, new Path(args[0]));
		FileOutputFormat.setOutputPath(job, new Path(args[1]));
		
		
		boolean result = job.waitForCompletion(true);
		System.exit(result ? 0 : 1);
	}
}

